// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// UsesAny is an autogenerated mock type for the UsesAny type
type UsesAny struct {
	mock.Mock
}

type UsesAny_Expecter struct {
	mock *mock.Mock
}

func (_m *UsesAny) EXPECT() *UsesAny_Expecter {
	return &UsesAny_Expecter{mock: &_m.Mock}
}

// GetReader provides a mock function with no fields
func (_m *UsesAny) GetReader() any {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReader")
	}

	var r0 any
	if rf, ok := ret.Get(0).(func() any); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	return r0
}

// UsesAny_GetReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReader'
type UsesAny_GetReader_Call struct {
	*mock.Call
}

// GetReader is a helper method to define mock.On call
func (_e *UsesAny_Expecter) GetReader() *UsesAny_GetReader_Call {
	return &UsesAny_GetReader_Call{Call: _e.mock.On("GetReader")}
}

func (_c *UsesAny_GetReader_Call) Run(run func()) *UsesAny_GetReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UsesAny_GetReader_Call) Return(_a0 any) *UsesAny_GetReader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsesAny_GetReader_Call) RunAndReturn(run func() any) *UsesAny_GetReader_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsesAny creates a new instance of UsesAny. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsesAny(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsesAny {
	mock := &UsesAny{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
